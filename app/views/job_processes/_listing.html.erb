<div class="main-content">
  <h1><%= title %></h1>

  <% if defined?(new_path) && new_path.present? %>
    <div class="header-add-new">
      <%= link_to "Add New #{title.singularize}", new_path, class: 'btn-save' %>
    </div>
  <% end %>

  <div class="listing-header">
    <div>
      <label for="rowsPerPage">Show:</label>
      <select id="rowsPerPage" onchange="paginateTable()">
        <option value="5">5</option>
        <option value="10" selected>10</option>
        <option value="20">20</option>
        <option value="50">50</option>
      </select>
    </div>
    <input type="text" id="tableSearch" onkeyup="searchTable()" placeholder="Search..." class="search-input">
  </div>

  <table class="listing-table" id="sortTable" data-sort-col="-1" data-sort-order="">
    <thead>
      <tr>
        <% columns.each_with_index do |col, idx| %>
          <th <% if col[:sortable] %> onclick="sortTable(<%= idx %>)" <% end %>>
            <%= col[:label] %> <% if col[:sortable] %><span class="sort-indicator"></span><% end %>
          </th>
        <% end %>
        <% if actions.present? %><th>Actions</th><% end %>
      </tr>
    </thead>
    <tbody>
      <% rows.each do |row| %>
        <tr>
          <% columns.each do |col| %>
            <td><%= col[:value].call(row) %></td>
          <% end %>
          <% if actions.present? %>
            <td>
              <% actions.each do |action| %>
                <% if action[:if].nil? || action[:if].call(row) %>
                  <%= link_to action[:label], action[:path].call(row), **(action[:options] || {}) %>
                <% end %>
              <% end %>
            </td>
          <% end %>
        </tr>
      <% end %>
    </tbody>
  </table>

  <div id="pagination" class="pagination-controls" data-current-page="1"></div>
</div>
<script>
  function sortTable(n) {
    const table = document.getElementById("sortTable");
    const dir = table.dataset.sortCol == n && table.dataset.sortOrder === "asc" ? "desc" : "asc";
    table.dataset.sortCol = n;
    table.dataset.sortOrder = dir;

    const rows = Array.from(table.tBodies[0].rows).filter(row => row.dataset.visible === "true");

    rows.sort((a, b) => {
      let x = a.cells[n].innerText.toLowerCase();
      let y = b.cells[n].innerText.toLowerCase();

      const isNumeric = !isNaN(parseFloat(x)) && isFinite(x);
      if (isNumeric) {
        x = parseFloat(x);
        y = parseFloat(y);
      }

      return (x < y ? -1 : x > y ? 1 : 0) * (dir === "asc" ? 1 : -1);
    });

    rows.forEach(row => table.tBodies[0].appendChild(row));
    document.getElementById("pagination").dataset.currentPage = 1;
    paginateTable();
  }

  function searchTable() {
    const input = document.getElementById("tableSearch").value.toLowerCase();
    const rows = document.getElementById("sortTable").tBodies[0].rows;

    for (let row of rows) {
      const rowText = row.innerText.toLowerCase();
      row.dataset.visible = rowText.includes(input) ? "true" : "false";
    }

    document.getElementById("pagination").dataset.currentPage = 1;
    paginateTable();
  }

  function paginateTable() {
    const table = document.getElementById("sortTable");
    const rowsPerPage = parseInt(document.getElementById("rowsPerPage").value);
    const allRows = Array.from(table.tBodies[0].rows);
    const visibleRows = allRows.filter(row => row.dataset.visible !== "false");

    const pagination = document.getElementById("pagination");
    let currentPage = parseInt(pagination.dataset.currentPage || 1);
    const totalPages = Math.ceil(visibleRows.length / rowsPerPage);

    // Ensure currentPage is valid
    if (currentPage > totalPages) currentPage = 1;

    const startIdx = (currentPage - 1) * rowsPerPage;
    const endIdx = startIdx + rowsPerPage;

    // First hide all rows
    allRows.forEach(row => row.style.display = "none");

    // Then show only relevant visible rows for current page
    visibleRows.forEach((row, idx) => {
      row.style.display = (idx >= startIdx && idx < endIdx) ? "" : "none";
    });

    // Update pagination buttons
    pagination.innerHTML = "";
    pagination.dataset.currentPage = currentPage;

    if (totalPages > 1) {
      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement("button");
        btn.innerText = i;
        btn.classList.toggle("active", i === currentPage);
        btn.addEventListener("click", () => {
          pagination.dataset.currentPage = i;
          paginateTable();
        });
        pagination.appendChild(btn);
      }
    }
  }

  document.addEventListener("turbo:load", () => {
    // Mark all rows visible on first load
    const rows = document.getElementById("sortTable").tBodies[0].rows;
    for (let row of rows) row.dataset.visible = "true";
    paginateTable();
  });
</script>
