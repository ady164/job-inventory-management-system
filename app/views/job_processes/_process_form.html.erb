<% reference ||= {
  diameter: [{ point: "D01", minimum: "", maximum: "" }],
  length: [{ point: "L01", minimum: "", maximum: "" }]
} %>

<div class="process-box" id="process-container-<%= i %>">
  <form id="form-<%= i %>" data-index="<%= i %>" data-process-id="<%= process.id %>" class="job-process-form">
    <div class="process-header">
      <div class="process-title"><%= process.job_process_type.name %></div>
      <div class="process-time-flex">
        <div class="process-time-input">
          Start Time:
          <input type="datetime-local" name="start_time" value="<%= process.start_time&.strftime('%Y-%m-%dT%H:%M') %>">
        </div>
        <div class="process-time-input">
          End Time:
          <input type="datetime-local" name="end_time" value="<%= process.end_time&.strftime('%Y-%m-%dT%H:%M') %>">
        </div>
      </div>
    </div>

    <div class="process-measurements" style="<%= 'display:none !important;' if process.job_process_type_id == 3 %>">
      <div class="table-box">
        <table class="process-table" id="diameter-table-<%= i %>">
          <thead>
            <tr><th colspan="6">Diameter Measurement (mm)</th></tr>
            <tr><td class="jo-header-invert">Point</td><td class="jo-header-invert">Reference</td><td class="jo-header-invert">X-X</td><td class="jo-header-invert">Y-Y</td><td class="jo-header-invert">Remarks</td><td class="jo-header-invert"></td></tr>
          </thead>
          <tbody id="diameter-body-<%= i %>"></tbody>
        </table>
        <% if process.job_process_type_id == 1 %>
          <div class="add-measurement-row">
            <button class="add-measurement-button" type="button" onclick="addManualRow('diameter', <%= i %>)">+ Add Diameter</button>
          </div>
        <% end %>
      </div>
      <div class="table-box">
        <table class="process-table" id="length-table-<%= i %>">
          <thead>
            <tr><th colspan="5">Length Measurement (mm)</th></tr>
            <tr><td class="jo-header-invert">Point</td><td class="jo-header-invert">Reference</td><td class="jo-header-invert">Measurement</td><td class="jo-header-invert">Remarks</td><td class="jo-header-invert"></td></tr>
          </thead>
          <tbody id="length-body-<%= i %>"></tbody>
        </table>
        <% if process.order_index == 1 %>
          <div class="add-measurement-row">
            <button class="add-measurement-button" type="button" onclick="addManualRow('length', <%= i %>)">+ Add Length</button>
          </div>
        <% end %>
      </div>
    </div>
    <div>
    <div class="jo-process-footer">
        <input type="hidden" name="measurement_data" id="measurement-data-<%= i %>">
        <input type="hidden" name="order_index_data" id="order-index-data-<%= i %>" value="<%= process.order_index %>">
        <div class="machine-user-select-container">
            Machine Used: 
            <select id="job_process_machine_select">
                <option value="">Not Required</option>
                <%= options_from_collection_for_select(@equipment, :id, :tag, process.equipment_id) %>
            </select>
        </div>
        <div class="machine-user-select-container">
            Completed By: 
            <select id="job_process_user_select">
                <option value="">Select a user</option>
                <%= options_from_collection_for_select(@users || [], :id, :name, process.user_id) %>
            </select>
        </div>
        <button type="submit" class="submit-process-button">Save</button>
    </div>
    </div>
  </form>
</div>

<script>
  var diameterReference_<%= i %> = <%= reference[:diameter].to_json.html_safe %>;
  var lengthReference_<%= i %> = <%= reference[:length].to_json.html_safe %>;
  var measurementData_<%= i %> = <%= process.measurements.to_json.html_safe %>;
  var order_index_<%= i %> = parseInt(<%= process.order_index %>, 10);

  // Unique variable names per iteration
  var rawDiameterData_<%= i %> = measurementData_<%= i %>?.diameter;
  var diameterData_<%= i %> = Array.isArray(rawDiameterData_<%= i %>)
    ? rawDiameterData_<%= i %>
    : rawDiameterData_<%= i %> ? [rawDiameterData_<%= i %>] : [];

  var rawLengthData_<%= i %> = measurementData_<%= i %>?.length;
  var lengthData_<%= i %> = Array.isArray(rawLengthData_<%= i %>)
    ? rawLengthData_<%= i %>
    : rawLengthData_<%= i %> ? [rawLengthData_<%= i %>] : [];
    // console.log(lengthData_<%= i %> )
    //console.log(diameterData_<%= i %> )

  document.addEventListener("DOMContentLoaded", () => {
    loadMeasurements("diameter", diameterReference_<%= i %>, `diameter-body-<%= i %>`, diameterData_<%= i %>);
    loadMeasurements("length", lengthReference_<%= i %>, `length-body-<%= i %>`, lengthData_<%= i %>);
  });
    document.addEventListener("turbo:load", function () {
    loadMeasurements("diameter", diameterReference_<%= i %>, `diameter-body-<%= i %>`, diameterData_<%= i %>);
    loadMeasurements("length", lengthReference_<%= i %>, `length-body-<%= i %>`, lengthData_<%= i %>);
    });

  document.getElementById("form-<%= i %>").addEventListener("submit", async (e) => {
    e.preventDefault();
    const form = e.target;
    const jobId = document.getElementById("job_id").value;
    const index = form.dataset.index;
    const processId = form.dataset.processId;
    const orderIndex = form.querySelector('[name="order_index_data"]').value;
    const startTime = form.querySelector('[name="start_time"]').value;
    const endTime = form.querySelector('[name="end_time"]').value;
    const equipmentId = document.getElementById("job_process_machine_select").value;
    const userId = document.getElementById("job_process_user_select").value;
    console.log("user id: " + userId);
    const diameter = collectMeasurements("diameter", `diameter-body-${index}`);
    const length = collectMeasurements("length", `length-body-${index}`);
    const measurements = {};
    const measurementData = { diameter, length };
    form.querySelector(`#measurement-data-${index}`).value = JSON.stringify(measurementData);

    // üö® Validate inputs
    if (!startTime) {
      alert("Please enter a valid start time.");
      return;
    }

    if (!endTime) {
      alert("Please enter a valid end time.");
      return;
    }

    if (new Date(startTime) > new Date(endTime)) {
      alert("Start time must be before end time.");
      return;
    }

    if (!userId) {
      alert("Please select a user.");
      return;
    }

    fetch("/job_processes/update_process.json", {
        method: "PATCH",
        headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
            job_id: jobId,
            job_process_id: processId,
            start_time: startTime,
            end_time: endTime,
            equipment_id: equipmentId,
            order_index: orderIndex,
            user_id: userId,
            measurement_data: measurementData
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success){
                console.log("Job process " + processId + " updated successfully");
                alert("Process updated and saved.");
                if (processId == 1) {
                    window.location.reload();  // Reload the page if processId == 1
                }
            } else{
                alert("‚ö†Ô∏è Failed to update process.");
            }
        })
        .catch(error => {
            console.error("‚ùå Error:", error);
        })
    });

</script>
