<style>
        .full-input-box{
            width: 100%;
            font-size:16px;
            height: 100%;
            box-sizing: border-box; 
            padding: 2px; 
            margin:0px;
            border: none !important;
            text-align:center;
        }
      .jo-container {
        width: 100%;
        max-width: 1200px;
        margin: 5px auto;
        background: white;
        min-height: 98vh;
        padding: 20px;
        box-sizing: border-box;
        background:white;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
      }

      .row {
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 5px;
      }

      .field {
        display: flex;
        align-items: center;
        gap: 10px;
        flex: 1 100%;
        margin: 5px 0;
        flex-wrap: wrap;
        justify-content: space-between;
      }
      # .field td{
      #   text-align: left;
      #   font-size: 20px;
      # }

      label {
        font-size: 16px;
        font-weight: bold;
      }

      .input-box {
        display: inline-block;
        height: 30px;
        text-align: left;
        border: solid black 2px;
        border-radius: 5px;
        font-size: 16px;
        padding: 2px 8px;
        box-sizing: border-box;
        flex: 1 1 auto;
        min-width: 150px;
      }

      # input[type="text"] {
      #   height: 30px;
      #   border: solid black 2px;
      #   border-radius: 5px;
      #   font-size: 16px;
      #   padding: 2px 8px;
      #   box-sizing: border-box;
      #   min-width: 150px;
      # }

      .photo-box {
        border: 2px solid #000;
        border-radius: 8px;
        width: 48%;
        min-height: 423px;
        text-align: left;
        background-color: #f9f9f9;
        box-sizing: content-box;
      }

      .photo-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 18px;
        padding: 10px 12px;
        margin-bottom: 10px;
        font-weight: bold;
      }

      .upload-btn {
        background-color: #dbdada;
        color: black;
        padding: 6px 15px;
        font-size: 14px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        display: inline-block;
      }

      .upload-btn:hover {
        background-color: #8a8a8b;
      }

      .name-material-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        font-size: 16px;
        table-layout: fixed;
      }

      table td,
      table th {
        border: 2px solid black;
        padding: 4px;
        text-align: center;
        vertical-align: middle;
      }

      table th {
        text-align: left;
        background-color: #fcc520;
        font-weight: bold;
      }

      table tr:nth-child(even) {
        background-color: #f2f2f2;
      }

      .measurement-tables {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        flex-wrap: wrap;
      }

      .table-box {
        flex: 1 1 48%;
      }

      .btn {
        background-color: #4caf50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 20px;
      }
      .process-box{
        display: block;
        border-radius: 15px;
        border: 1px solid black;
        padding: 15px;
        margin-bottom:20px;
      }

      .gallery-container {
        max-width: 600px;
        padding: 0 10px;
        margin: 0 auto;
      }
      .main-image  {
          height:300px;
      }
      .main-image img {
        width: calc(100% - 4px);
        height:auto;
        max-height: 300px;
        object-fit: contain;
        margin-bottom: 10px;
      }

      .thumbnail-row {
        display: flex;
        gap: 8px;
        overflow-x: auto;
      }

      .thumbnail-row img.thumbnail {
        width: 80px;
        height: 60px;
        object-fit: cover;
        cursor: pointer;
        border: 2px solid transparent;
        transition: border-color 0.3s;
      }

      .thumbnail-row img.thumbnail:hover {
        border-color: #007bff;
      }

      .jo-modal {
          display: none;
          position: fixed;
          z-index: 9999;
          padding-top: 60px;
          left: 0;
          top: 0;
          width: 100vw;
          height: 100vh;
          overflow: auto;
          background-color: rgba(0,0,0,0.9);
      }
      .jo-modal-content {
          position:fixed;
          margin: auto;
          display: block;
          max-width: 90vw;
          max-height: 90vh;
          left: 50%;
          top: 50%;
          transform: translate(-50%, -50%);
      }
      .close {
          position: fixed;
          top: 20px;
          right: 35px;
          color: white;
          font-size: 40px;
          font-weight: bold;
          cursor: pointer;
          user-select: none;
          z-index: 10000;
      }
      .close:hover {
          color: #bbb;
      }
      .show{
        display:block !important;
      }
      .process-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 15px;
        font-size: 16px;
      }
      .process-header {
        display:flex;
        justify-content: space-between;
        align-items: top;
        padding-bottom:10px;
      }

      .process-title{
        flex:1;
        font-size: 30px;
        font-weight:bold;
      }
      .process-time-flex{
        flex:1;
        text-align:right;
      }
      
      .process-time-input{
        display: inline-block;
        font-size: 16px;
        padding:5px;
      }

      .process-time-input input{
        font-size: 16px;
      }
      .process-measurements{
        padding-top:10px;
        padding-bottom:10px;
      }
      .process-measurement-title{
        font-size:18px;
        font-weight:bold;
      }
      .min-input{
        font-size:16px;
        width: 40%;
        border:1px solid #EEE;
        text-align:center;
      }
      .max-input{
        font-size:16px;
        width: 40%;
        border:1px solid #EEE;
        text-align:center;
      }
      .measurement-input{
        font-size:16px;
        width: calc(100% - 8px);
        border:none;  
        text-align:center;
      }
      .remarks-input{
        font-size:16px;
        width: calc(100% - 8px);
        border:none;  
        text-align:left;
      }

      .out-of-spec {
        border: 2px solid red;
        background-color: #ffe5e5;
      }
      .remove-td{
        width:30px;
      }
      .process-remove-btn{
        font-size: 20px;
        width: 30px;
        height: 30px;
        text-align: center;
        color: white;
        background: red;
        border: 1px solid #cccccc;
      }
      .add-measurement-row{
        text-align:right;
        margin-bottom:15px;
      }
      .add-measurement-button{
        padding: 5px 12px;
        font-size: 16px;
      }
      .job-process-container{
        width:100%;
      }
      .jo-header-invert{
        background:#CCC;
      }
      .jo-process-footer{
        display:flex;
        justify-content:space-between;
        align-items:center;
      }
      .machine-user-select-container{
        display:inline-block;
        font-size:18px;
      }
      .machine-user-select-container select{
        padding: 5px 12px;
        font-size: 16px;
      }
      .submit-process-button{
        padding: 6px 15px;
        font-size: 20px;
        color: black;
        font-weight: bold;
        background: #00ff00;
        border: 1px solid #5ee95e;
      }
      .create-process-container{
        display:block;
        width: calc(100% - 30px);
        font-size:18px;
        text-align:center;
        border-radius: 15px;
        border: 1px solid black;
        padding: 15px;
        margin-bottom: 20px;
        margin:0 auto;
      }
      .create-process-container select{
        padding: 5px 12px;
        font-size: 16px;
        margin-right:20px;
      }
      
    </style>

<script>

function validateInput(input) {
  const value = parseFloat(input.value);
  const min = parseFloat(input.dataset.min);
  const max = parseFloat(input.dataset.max);
  if (isNaN(value) || input.classList.contains("min-input") || input.classList.contains("max-input")) {
    input.classList.remove("out-of-spec");
    input.title = "";
    return;
  }
  if (value < min || value > max) {
    input.classList.add("out-of-spec");
    input.title = `Out of spec! (${min} - ${max})`;
  } else {
    input.classList.remove("out-of-spec");
    input.title = "";
  }
}

function incrementPoint(label) {
  const prefix = label[0];
  const num = parseInt(label.slice(1), 10) + 1;
  return prefix + String(num).padStart(2, '0');
}

function createRow(type, ref, m = {}, process_index, orderIndex = 0) {
  const tr = document.createElement('tr');
  tr.innerHTML = `<td>${ref.point}</td>`;

  const refTd = document.createElement('td');
  const min = document.createElement('input');
  const max = document.createElement('input');

  min.addEventListener('keydown', e => e.key === 'Enter' && e.preventDefault());
  max.addEventListener('keydown', e => e.key === 'Enter' && e.preventDefault());

  min.type = max.type = "number";
  min.step = max.step = "0.001";
  min.className = "min-input";
  max.className = "max-input";
  min.value = ref.minimum || "";
  max.value = ref.maximum || "";
  if (process_index != 1){
    min.readOnly = true;
    min.style.pointerEvents = 'none';
    max.readOnly = true;
    max.style.pointerEvents = 'none';
  }
  refTd.appendChild(min);
  refTd.appendChild(document.createTextNode(" ~ "));
  refTd.appendChild(max);
  tr.appendChild(refTd);

  if (type === 'diameter') {
    ['x', 'y'].forEach(axis => {
      const td = document.createElement('td');
      const input = document.createElement('input');
      input.classList = "measurement-input";
      input.type = 'number';
      input.step = '0.001';
      input.value = m[axis] || '';

      function updateMinMax() {
        input.dataset.min = parseFloat(min.value) || 0;
        input.dataset.max = parseFloat(max.value) || 0;
        validateInput(input);
      }

      updateMinMax();
      input.addEventListener('input', () => validateInput(input));
      min.addEventListener('input', updateMinMax);
      max.addEventListener('input', updateMinMax);

      td.appendChild(input);
      tr.appendChild(td);
    });
  } else {
    const td = document.createElement('td');
    const input = document.createElement('input');
    input.classList = "measurement-input";
    input.type = 'number';
    input.step = '0.001';
    input.value = m.value || '';

    function updateMinMax() {
      input.dataset.min = parseFloat(min.value) || 0;
      input.dataset.max = parseFloat(max.value) || 0;
      validateInput(input);
    }

    updateMinMax();
    input.addEventListener('input', () => validateInput(input));
    min.addEventListener('input', updateMinMax);
    max.addEventListener('input', updateMinMax);

    td.appendChild(input);
    tr.appendChild(td);
  }

  const remarks = document.createElement('td');
  const remarksInput = document.createElement('input');
  remarksInput.classList = "measurement-input";
  remarksInput.type = 'text';
  remarksInput.value = m.remarks || '';
  remarks.appendChild(remarksInput);
  tr.appendChild(remarks);

  const removeTd = document.createElement('td');
  removeTd.className = "remove-td";
  if (process_index == 1){
    const removeBtn = document.createElement('button');
    removeBtn.type = 'button';
    removeBtn.textContent = '✖';
    removeBtn.className = "process-remove-btn";
    removeBtn.onclick = () => tr.remove();
    removeTd.appendChild(removeBtn);
  }
  tr.appendChild(removeTd);

  return tr;
}

function rowHasData(row) {
  return [...row.querySelectorAll('input')].some(inp => inp.value.trim() !== '');
}

function addManualRow(type, index) {
  const tbodyId = `${type}-body-${index}`;
  const tbody = document.getElementById(tbodyId);
  const rows = tbody.querySelectorAll('tr');
  const lastPoint = rows.length ? rows[rows.length - 1].children[0].textContent : (type === 'diameter' ? 'D00' : 'L00');
  const newPoint = incrementPoint(lastPoint);
  const ref = { point: newPoint, minimum: "", maximum: "" };

  const orderIndex = parseInt(document.getElementById(`form-${index}`)?.dataset.orderIndex || "0");
  const row = createRow(type, ref, {}, index, orderIndex);
  tbody.appendChild(row);
}

function loadMeasurements(type, refs, tbodyId, dataList = [], process_index, orderIndex = 0) {
  console.log("Measurements Loaded:" + tbodyId)
  const tbody = document.getElementById(tbodyId);
  tbody.innerHTML = '';
  refs.forEach((ref, idx) => {
    const row = createRow(type, ref, dataList[idx] || {}, process_index, orderIndex);
    tbody.appendChild(row);
  });
}

function collectMeasurements(type, tbodyId) {
  const rows = document.getElementById(tbodyId).querySelectorAll('tr');
  const result = [];
  rows.forEach(row => {
    // if (!rowHasData(row)) return;
    const cells = row.children;
    const point = cells[0]?.textContent?.trim();
    const min = cells[1].querySelector('.min-input')?.value || '';
    const max = cells[1].querySelector('.max-input')?.value || '';
    const data = { point, minimum: min, maximum: max };
    if (type === 'diameter') {
      data.x = cells[2]?.querySelector('input')?.value ?? '';
      data.y = cells[3]?.querySelector('input')?.value ?? '';
      data.remarks = cells[4]?.querySelector('input')?.value ?? '';
    } else {
      data.value = cells[2]?.querySelector('input')?.value ?? '';
      data.remarks = cells[3]?.querySelector('input')?.value ?? '';
    }
    result.push(data);
  });
  return result;
}

  async function handleFormSubmit(e, index) {
    e.preventDefault();
    const form = document.getElementById(`form-${index}`);
    const jobId = document.getElementById("job_id").value;
    const processId = form.dataset.processId;
    const orderIndex = form.querySelector('[name="order_index_data"]').value;
    const startTime = form.querySelector('[name="start_time"]').value;
    const endTime = form.querySelector('[name="end_time"]').value;
    const equipmentId = document.getElementById(`job_process_machine_select-${index}`).value;
    console.log("machine id: " + equipmentId);
    const userId = document.getElementById(`job_process_user_select-${index}`).value;
    console.log("user id: " + userId);
    const diameter = collectMeasurements("diameter", `diameter-body-${index}`);
    const length = collectMeasurements("length", `length-body-${index}`);
    const measurements = {};
    const measurementData = { diameter, length };
    form.querySelector(`#measurement-data-${index}`).value = JSON.stringify(measurementData);

    // 🚨 Validate inputs
    if (!startTime) {
      alert("Please enter a valid start time.");
      return;
    }

    if (!endTime) {
      alert("Please enter a valid end time.");
      return;
    }

    if (new Date(startTime) > new Date(endTime)) {
      alert("Start time must be before end time.");
      return;
    }

    if (!userId) {
      alert("Please select a user.");
      return;
    }

    fetch("/job_processes/update_process.json", {
        method: "PATCH",
        headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
            job_id: jobId,
            job_process_id: processId,
            start_time: startTime,
            end_time: endTime,
            equipment_id: equipmentId,
            order_index: orderIndex,
            user_id: userId,
            measurement_data: measurementData
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.success){
                console.log("Job process " + processId + " updated successfully");
                alert("Process updated and saved.");
                console.log(orderIndex);
                if (orderIndex == 1) {
                    window.location.reload();
                }
            } else{
                alert("⚠️ Failed to update process.");
            }
        })
        .catch(error => {
            console.error("❌ Error:", error);
        })
    };

</script>

    <div class="jo-container">
      <%= link_to 'Back to List', job_processes_path, class: 'btn-back' %>
      <h1>JOB ORDER - <%= @job.part_type %></h1>

      <div class="row">
        <div class="field">
          <label>Job Reference:</label>
          <div class="input-box"><%= @job.job_reference_number %></div>
          <label>Customer/Vessel:</label>
          <div class="input-box">
            <%= @job.customer.name %>
            <% if @job.vessle_name.present? %>
            &nbsp;/&nbsp;<%= @job.vessle_name %>
            <% end %>            
          </div>
        </div>
      </div>

      <div class="row">
        <div class="field">
          <label>Part Model:</label>
          <div class="input-box"><%= @job.part_model %></div>
          <label>Start Date:</label>
          <input type="text" value="<%= @jobstart.present? ? @jobstart.start_time.strftime('%-d/%-m/%Y') : ''  %>" />
          <label>Required Date:</label>
          <input type="text" value="<%= @job.required_date.present? ? @job.required_date.strftime('%-d/%-m/%Y') : '' %>" />

        </div>
      </div>

      <% job_ref = @job.job_reference_number %>
      <% incoming_dir = Rails.root.join("public", "jobs", job_ref, "incoming") %>
      <% drawing_dir = Rails.root.join("public", "jobs", job_ref, "drawings") %>

      <%= form_with url: upload_job_photos_path(@job), method: :post, multipart: true, local: true do %>
      <div class="row">
        <div class="field">
            <div class="photo-box">
                <div class="photo-header">
                <span>Incoming Photos</span>
                <label class="upload-btn">
                    Add Photos
                    <input type="file" name="incoming_photos[]" multiple accept="image/*" hidden onchange="this.form.submit();" />
                </label>
                </div>
                <div class="gallery-container">
                    <% incoming_images = Dir.exist?(incoming_dir) ? Dir.glob("#{incoming_dir}/*.{jpg,jpeg,png,gif}") : [] %>
                    <% if incoming_images.any? %>
                      <% first_filename = File.basename(incoming_images.first) %>

                      <!-- Main Image -->
                      <div class="main-image">
                        <img
                          id="incoming-current-image"
                          src="/jobs/<%= job_ref %>/incoming/<%= first_filename %>"
                          alt="Incoming Main Image"
                          onclick="openJoModal(this.src)"
                          style="cursor: pointer;"
                        />
                      </div>

                      <!-- Thumbnail Row -->
                      <div class="thumbnail-row">
                        <% incoming_images.each do |img_path| %>
                          <% filename = File.basename(img_path) %>
                          <img
                            src="/jobs/<%= job_ref %>/incoming/<%= filename %>"
                            class="thumbnail"
                            alt="Incoming Thumbnail"
                            onclick="document.getElementById('incoming-current-image').src=this.src"
                          />
                        <% end %>
                      </div>

                    <% else %>
                      <p>No images available.</p>
                    <% end %>
                </div>
            </div>
            <div class="photo-box">
                <div class="photo-header">
                    <span>Drawing Photos</span>
                    <label class="upload-btn">
                        Add Drawings
                        <input type="file" name="drawing_photos[]" multiple accept="image/*" hidden onchange="this.form.submit();" />
                    </label>
                </div>
                <div class="gallery-container">
                    <% drawing_images = Dir.exist?(drawing_dir) ? Dir.glob("#{drawing_dir}/*.{jpg,jpeg,png,gif}") : [] %>
                    <% if drawing_images.any? %>
                        <div class="main-image">
                        <img 
                          id="drawing-current-image" 
                          src="/jobs/<%= job_ref %>/drawings/<%= File.basename(drawing_images.first) %>" 
                          alt="Drawing Main Image" 
                          onclick=openJoModal(this.src)
                          style="cursor: pointer;"
                        />
                        </div>
                        <div class="thumbnail-row">
                        <% drawing_images.each do |img_path| %>
                            <% filename = File.basename(img_path) %>
                            <img
                            src="/jobs/<%= job_ref %>/drawings/<%= filename %>"
                            class="thumbnail"
                            alt="Drawing Thumbnail"
                            onclick="document.getElementById('drawing-current-image').src=this.src"
                            />
                        <% end %>
                        </div>
                    <% else %>
                        <p>No drawing photos available.</p>
                    <% end %>
                <div>
            </div>
        </div>
      </div>
      <% end %>

      <div id="jo-image-modal" class="jo-modal" onclick="closeJoModal()">
        <span class="close" onclick="closeJoModal()">&times;</span>
        <img class="jo-modal-content" id="jo-modal-image" />
      </div>

      <div class="row">
        <div class="field">
          <table class="name-material-table">
            <tr>
              <td><b>Part Name:</b>
              <% if @job.part_name.present? %>
                    &nbsp;<%= @job.part_name %>
              <% else %>
                    &nbsp;<%= @job.part_model %> <%= @job.part_type %>
              <% end %>
              </td>
              <td><b>Base Material:</b> <%= @job.base_material %></td>
              <td><b>Filter Material:</b> 
              <% if @job.filler_material.present? %>
                    &nbsp;<%= @job.filler_material %>
              <% else %>
                    &nbsp;N/A
              <% end %>
              </td>
            </tr>
          </table>
        </div>
      </div>

      <div id="job_processes_list" class="job-process-container">
        <% @job_processes.each_with_index do |process, i| %>
          <%= render partial: 'job_processes/process_form', locals: { process: process, i: process.order_index, reference: @reference } %>
          
          <div
            data-job-measurement
            data-order-index="<%= process.order_index %>"
            data-diameter-reference='<%= (@reference&.diameter || []).to_json.html_safe %>'
            data-length-reference='<%= (@reference&.length || []).to_json.html_safe %>'
            data-measurements='<%= (process.measurements || {}).to_json.html_safe %>'
          ></div>


        <% end %>
      </div>
      <% if @job.status == "Confirmed" %>
      <div class="create-process-container">
        <select id="job_process_type_select">
          <%= options_from_collection_for_select(@job_process_types, :id, :name) %>
        </select>
        <input type="hidden" id="job_id" value="<%= @job.id %>">
        <button class="add-measurement-button" id="create_process_btn" onclick="handleCreateProcessClick(event)">+ New Job Process</button>
      <div>
      <% end %>

<script>
  loadAllJobMeasurements = function () {
    console.log("loading all job measurements")
    const elements = document.querySelectorAll('[data-job-measurement]');

    elements.forEach((el) => {
      const orderIndex = el.dataset.orderIndex;
      const diameterRef = JSON.parse(el.dataset.diameterReference);
      const lengthRef = JSON.parse(el.dataset.lengthReference || '[{"point":"D01","minimum":"","maximum":""}]');
      const measurements = JSON.parse(el.dataset.measurements || '{}');
      console.log(diameterRef)
      console.log(lengthRef)
      console.log(measurements)

      const rawDiameter = measurements.diameter;
      const diameterData = Array.isArray(rawDiameter) ? rawDiameter : rawDiameter ? [rawDiameter] : [{"point":"D01","minimum":"","maximum":""}];

      const rawLength = measurements.length;
      const lengthData = Array.isArray(rawLength) ? rawLength : rawLength ? [rawLength] : [{"point":"D01","minimum":"","maximum":""}];

      loadMeasurements("diameter", diameterRef, `diameter-body-${orderIndex}`, diameterData, parseInt(orderIndex));
      loadMeasurements("length", lengthRef, `length-body-${orderIndex}`, lengthData, parseInt(orderIndex));
    });
  };

  async function handleCreateProcessClick(e) {
    e.preventDefault();
    const jobId = document.getElementById("job_id").value;
    const jobProcessTypeId = document.getElementById("job_process_type_select").value;

    fetch("/job_processes/create_process.json", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({
        job_id: jobId,
        job_process_type_id: jobProcessTypeId
      })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        const container = document.getElementById("job_processes_list");
        container.insertAdjacentHTML("beforeend", data.html);

        // Parse and inject dynamic row content
        const index = data.order_index;

        const diameterRef = JSON.parse(data.diameter_reference || "[]");
        const lengthRef = JSON.parse(data.length_reference || "[]");
        const measurementData = JSON.parse(data.measurement_data || "{}");
        console.log(`diameter-body-${index}`)
        requestAnimationFrame(() => {
          loadMeasurements("diameter", diameterRef, `diameter-body-${index}`, measurementData?.diameter || []);
          loadMeasurements("length", lengthRef, `length-body-${index}`, measurementData?.length || []);
        });
        window.location.reload();

        console.log(`✅ Added Job Process Type ID ${data.job_process_type_id} with order_index ${data.order_index}`);
      } else {
        alert("⚠️ Failed to create process.");
      }
    })
    .catch(error => {
      console.error("❌ Error:", error);
    });
  };

window.addEventListener("beforeunload", () => {
  sessionStorage.setItem("scrollY", window.scrollY);
});


document.addEventListener("turbo:load", () => {
  const scrollY = sessionStorage.getItem("scrollY");
  if (scrollY !== null) {
    window.scrollTo(0, parseInt(scrollY, 10));
    sessionStorage.removeItem("scrollY");
  }
  // Load all measurements
  loadAllJobMeasurements();
});

  function openJoModal(imageSrc) {
    const modal = document.getElementById("jo-image-modal");
    const modalImage = document.getElementById("jo-modal-image");
    console.log('Image modal open')

    modalImage.src = imageSrc;
    modal.classList.add("show");
  }

  function closeJoModal() {
    const modal = document.getElementById("jo-image-modal");
    modal.classList.remove("show");
  }
</script>