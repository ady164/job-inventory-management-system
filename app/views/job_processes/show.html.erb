    <style>
        .full-input-box{
            width: 100%;
            font-size:16px;
            height: 100%;
            box-sizing: border-box; 
            padding: 2px; 
            margin:0px;
            border: none !important;
            text-align:center;
        }
      .jo-container {
        width: 100%;
        max-width: 1200px;
        margin: 5px auto;
        background: white;
        min-height: 98vh;
        padding: 20px;
        box-sizing: border-box;
        background:white;
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
      }

      .row {
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 5px;
      }

      .field {
        display: flex;
        align-items: center;
        gap: 10px;
        flex: 1 1 100%;
        margin: 5px 0;
        flex-wrap: wrap;
        justify-content: space-between;
      }
      .field td{
        text-align: left;
        font-size: 20px;
      }

      label {
        font-size: 16px;
        font-weight: bold;
      }

      .input-box {
        display: inline-block;
        height: 30px;
        text-align: left;
        border: solid black 2px;
        border-radius: 5px;
        font-size: 16px;
        padding: 2px 8px;
        box-sizing: border-box;
        flex: 1 1 auto;
        min-width: 150px;
      }

      input[type="text"] {
        height: 30px;
        border: solid black 2px;
        border-radius: 5px;
        font-size: 16px;
        padding: 2px 8px;
        box-sizing: border-box;
        min-width: 150px;
      }

      .photo-box {
        border: 2px solid #000;
        border-radius: 8px;
        width: 48%;
        min-height: 300px;
        text-align: left;
        background-color: #f9f9f9;
        box-sizing: content-box;
      }

      .photo-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 18px;
        padding: 10px 12px;
        margin-bottom: 10px;
        font-weight: bold;
      }

      .upload-btn {
        background-color: #dbdada;
        color: black;
        padding: 6px 15px;
        font-size: 14px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        display: inline-block;
      }

      .upload-btn:hover {
        background-color: #8a8a8b;
      }

      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        font-size: 16px;
        table-layout: fixed;
      }

      table td,
      table th {
        border: 2px solid black;
        padding: 4px;
        text-align: center;
        vertical-align: middle;
      }

      table th {
        text-align: left;
        background-color: #fcc520;
        font-weight: bold;
      }

      table tr:nth-child(even) {
        background-color: #f2f2f2;
      }

      .measurement-tables {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        flex-wrap: wrap;
      }

      .table-box {
        flex: 1 1 48%;
      }

      .btn {
        background-color: #4caf50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 20px;
      }
      .process-box{
        display: block;
        border-radius: 15px;
        border: 1px solid black;
        padding: 15px;
      }


        .gallery-container {
        max-width: 600px;
        margin: 0 auto;
        }
        .main-image  {
            height:300px;
        }
        .main-image img {
        width: calc(100% - 4px);
        height:auto;
        max-height: 300px;
        object-fit: contain;
        margin-bottom: 10px;
        }

        .thumbnail-row {
        display: flex;
        gap: 8px;
        overflow-x: auto;
        }

        .thumbnail-row img.thumbnail {
        width: 80px;
        height: 60px;
        object-fit: cover;
        cursor: pointer;
        border: 2px solid transparent;
        transition: border-color 0.3s;
        }

        .thumbnail-row img.thumbnail:hover {
        border-color: #007bff;
        }

        .jo-modal {
            display: none;
            position: fixed;
            z-index: 9999;
            padding-top: 60px;
            left: 0;
            top: 0;
            width: 100vw;
            height: 100vh;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }
        .jo-modal-content {
            position:fixed;
            margin: auto;
            display: block;
            max-width: 90vw;
            max-height: 90vh;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        .close {
            position: fixed;
            top: 20px;
            right: 35px;
            color: white;
            font-size: 40px;
            font-weight: bold;
            cursor: pointer;
            user-select: none;
            z-index: 10000;
        }
        .close:hover {
            color: #bbb;
        }

        .process-header {
          display:flex;
          justify-content: space-between;
        }

        .process-time-flex{
          text-align:right;
        }
        
        .process-time-input{
          font-size: 16px;
          padding:5px;
        }

        .process-time-input input{
          font-size: 16px;
        }
    </style>

    <div class="jo-container">
      <%= link_to 'Back to List', job_processes_path, class: 'btn-back' %>
      <h1>JOB ORDER - <%= @job.part_type %></h1>

      <div class="row">
        <div class="field">
          <label>Job Reference:</label>
          <div class="input-box"><%= @job.job_reference_number %></div>
          <label>Customer/Vessel:</label>
          <div class="input-box">
            <%= @job.customer.name %>
            <% if @job.vessle_name.present? %>
            &nbsp;/&nbsp;<%= @job.vessle_name %>
            <% end %>            
          </div>
        </div>
      </div>

      <div class="row">
        <div class="field">
          <label>Part Model:</label>
          <div class="input-box"><%= @job.part_model %></div>
          <label>Start Date:</label>
          <input type="text" value="" />
          <label>Required Date:</label>
          <input type="text" value="<%= @job.required_date.strftime('%-d/%-m/%Y') if @job.required_date.present? %>" />
        </div>
      </div>

        <% job_ref = @job.job_reference_number %>
        <% incoming_dir = Rails.root.join("public", "jobs", job_ref, "incoming") %>
        <% drawing_dir = Rails.root.join("public", "jobs", job_ref, "drawings") %>

        <%= form_with url: upload_job_photos_path(@job), method: :post, multipart: true, local: true do %>
      <div class="row">
        <div class="field">
            <div class="photo-box">
                <div class="photo-header">
                <span>Incoming Photos</span>
                <label class="upload-btn">
                    Add Photos
                    <input type="file" name="incoming_photos[]" multiple accept="image/*" hidden onchange="this.form.submit();" />
                </label>
                </div>
                <div class="gallery-container">
                    <% incoming_images = Dir.exist?(incoming_dir) ? Dir.glob("#{incoming_dir}/*.{jpg,jpeg,png,gif}") : [] %>
                    <% if incoming_images.any? %>
                        <div class="main-image">
                        <img id="incoming-current-image" src="/jobs/<%= job_ref %>/incoming/<%= File.basename(incoming_images.first) %>" alt="Incoming Main Image" />
                        </div>
                        <div class="thumbnail-row">
                        <% incoming_images.each do |img_path| %>
                            <% filename = File.basename(img_path) %>
                            <img
                            src="/jobs/<%= job_ref %>/incoming/<%= filename %>"
                            class="thumbnail"
                            alt="Incoming Thumbnail"
                            onclick="document.getElementById('incoming-current-image').src=this.src"
                            />
                        <% end %>
                        </div>
                    <% else %>
                        <p>No incoming photos available.</p>
                    <% end %>
                </div>
            </div>
            <div class="photo-box">
                <div class="photo-header">
                    <span>Drawing Photos</span>
                    <label class="upload-btn">
                        Add Drawings
                        <input type="file" name="drawing_photos[]" multiple accept="image/*" hidden onchange="this.form.submit();" />
                    </label>
                </div>
                <div class="gallery-container">
                    <% drawing_images = Dir.exist?(drawing_dir) ? Dir.glob("#{drawing_dir}/*.{jpg,jpeg,png,gif}") : [] %>
                    <% if drawing_images.any? %>
                        <div class="main-image">
                        <img id="drawing-current-image" src="/jobs/<%= job_ref %>/drawings/<%= File.basename(drawing_images.first) %>" alt="Drawing Main Image" />
                        </div>
                        <div class="thumbnail-row">
                        <% drawing_images.each do |img_path| %>
                            <% filename = File.basename(img_path) %>
                            <img
                            src="/jobs/<%= job_ref %>/drawings/<%= filename %>"
                            class="thumbnail"
                            alt="Drawing Thumbnail"
                            onclick="document.getElementById('drawing-current-image').src=this.src"
                            />
                        <% end %>
                        </div>
                    <% else %>
                        <p>No drawing photos available.</p>
                    <% end %>
                <div>
            </div>
        </div>
      </div>
        <% end %>


        <div id="jo-image-modal" class="jo-modal" onclick="closeJoModal()">
        <span class="close" onclick="closeJoModal()">&times;</span>
        <img class="jo-modal-content" id="jo-modal-image" />
        </div>

      <div class="row">
        <div class="field">
          <table>
            <tr>
              <td><b>Part Name:</b>
              <% if @job.part_name.present? %>
                    &nbsp;<%= @job.part_name %>
              <% else %>
                    &nbsp;<%= @job.part_model %> <%= @job.part_type %>
              <% end %>
              </td>
              <td><b>Base Material:</b> <%= @job.base_material %></td>
              <td><b>Filter Material:</b> 
              <% if @job.filler_material.present? %>
                    &nbsp;<%= @job.filler_material %>
              <% else %>
                    &nbsp;N/A
              <% end %>
              </td>
            </tr>
          </table>
        </div>
      </div>
       <div class="process-box" id="incoming">
        <div class="process-header">
          <h2>Incoming</h2>
          <div class="process-time-flex">
            <div class="process-time-input">Start Time: <input type="datetime-local" id="start-time" name="Start Time"></div>
            <div class="process-time-input">End Time: <input type="datetime-local" id="end-time" name="End Time"></div>
          </div>
        </div>
        <div class="process-measurements">
          <div class="table-box">
            <table id="diameter-table">
              <thead>
                <tr><th colspan="4">Diameter Measurement</th></tr>
                <tr>
                  <td>Point</td>
                  <td>Standard / Reference</td>
                  <td>Incoming X-X</td>
                  <td>Incoming Y-Y</td>
                </tr>
              </thead>
              <tbody id="diameter-body"></tbody>
            </table>
          </div>
        </div>
      </div>

      <div class="process-box" id="incoming">
        <div class="row">
          <div class="measurement-field">
            <div class="measurement-field">
              <h2>Incoming</h2>
              <table>
                <tr>
                  <th colspan="4">Straightness/Runout Check</th>
                </tr>
                <tr>
                  <td>Point</td>
                  <td>A</td>
                  <td>B</td>
                  <td>C</td>
                  <td>D</td>
                  <td>E</td>
                  <td>F</td>
                  <td>G</td>
                  <td>H</td>
                  <td>I</td>
                  <td>J</td>
                  <td>K</td>
                  <td>L</td>
                  <td>M</td>
                  <td>N</td>
                  <td>O</td>
                </tr>
                <tr>
                  <td>0&deg;</td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>90&deg;</td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>180&deg;</td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>270&deg;</td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>TIR</td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
              </table>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="measurement-field measurement-tables">
            <div class="table-box">
              <table>
                <tr>
                  <th colspan="4">Diameter Measurement</th>
                </tr>
                <tr>
                  <td>Point</td>
                  <td>Standard/ Reference</td>
                  <td>Incoming X-X</td>
                  <td>Incoming Y-Y</td>
                </tr>
                <tr>
                  <td>D01</td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>D02</td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>D03</td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>D04</td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>D05</td>
                  <td></td>
                  <td></td>
                  <td></td>
                </tr>
              </table>
            </div>
            <div class="table-box">
              <table>
                <tr>
                  <th colspan="3">Length Measurement</th>
                </tr>
                <tr>
                  <td>Point</td>
                  <td>Standard/ Reference</td>
                  <td>Measurement</td>
                </tr>
                <tr>
                  <td>L01</td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>L02</td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>L03</td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>L04</td>
                  <td></td>
                  <td></td>
                </tr>
                <tr>
                  <td>L05</td>
                  <td></td>
                  <td></td>
                </tr>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>

  <script>
  const diameterReferenceTable = [
    { point: "D01", minimum: 50.00, maximum: 51.05},
    { point: "D02", minimum: 50.00, maximum: 51.05},
    { point: "D03", minimum: 50.00, maximum: 51.05},
    { point: "D04", minimum: 50.00, maximum: 51.05},
    { point: "D05", minimum: 0, maximum: 0},
    { point: "D05", minimum: 0, maximum: 0},
    { point: "D05", minimum: 0, maximum: 0}
  ];

  const measurementData = [
    { point: "D01", x: "50.05", y: "50.03" },
    { point: "D02", x: "49.48", y: "49.51" }
  ];

  const tbody = document.getElementById("diameter-body");

  function createRow(ref, measurement = {}) {
    const row = document.createElement("tr");

    // Point cell
    const pointCell = document.createElement("td");
    pointCell.textContent = ref.point;
    row.appendChild(pointCell);

   // Standard Reference Minimum ~ Maximum
    const stdCell = document.createElement("td");

    const minInput = document.createElement("input");
    minInput.type = "text";
    minInput.placeholder = "Min";
    minInput.classList.add("min-input");
    minInput.value = ref.minimum || "";

    const separator = document.createTextNode(" ~ ");

    const maxInput = document.createElement("input");
    maxInput.type = "text";
    maxInput.placeholder = "Max";
    maxInput.classList.add("max-input");
    maxInput.value = ref.maximum || "";

    stdCell.appendChild(minInput);
    stdCell.appendChild(separator);
    stdCell.appendChild(maxInput);
    row.appendChild(stdCell);


    // X and Y Inputs
    ["x", "y"].forEach(key => {
      const td = document.createElement("td");
      const input = document.createElement("input");
      input.type = "text";
      input.name = `${ref.point}_${key}`;
      input.value = measurement[key] || "";
      input.addEventListener("input", handleInputChange);
      td.appendChild(input);
      row.appendChild(td);
    });

    tbody.appendChild(row);
  }

  function getNextReference() {
    const renderedPoints = Array.from(tbody.querySelectorAll("tr td:first-child"))
      .map(td => td.textContent);
    return diameterReferenceTable.find(r => !renderedPoints.includes(r.point));
  }

  function handleInputChange() {
    const rows = Array.from(tbody.querySelectorAll("tr"));
    let emptyCount = 0;
    let shouldTrim = false;

    for (let i = 0; i < rows.length; i++) {
      const inputs = rows[i].querySelectorAll("input:not([readonly])");
      const isEmpty = Array.from(inputs).every(input => input.value.trim() === "");

      if (isEmpty) {
        emptyCount++;
        if (emptyCount >= 2) {
          shouldTrim = true;
          trimRows(i);
          break;
        }
      } else {
        emptyCount = 0;
      }
    }

    const lastRow = rows[rows.length - 1];
    const lastInputs = lastRow.querySelectorAll("input:not([readonly])");
    const isLastFilled = Array.from(lastInputs).some(input => input.value.trim() !== "");

    if (isLastFilled) {
      const nextRef = getNextReference();
      if (nextRef) createRow(nextRef);
    }
  }

  function trimRows(startIndex) {
    const rows = Array.from(tbody.querySelectorAll("tr"));
    for (let i = rows.length - 1; i >= startIndex; i--) {
      tbody.removeChild(rows[i]);
    }
  }

  function loadMeasurements() {
    tbody.innerHTML = "";

    const dataMap = {};
    measurementData.forEach(m => dataMap[m.point] = m);

    diameterReferenceTable.forEach(ref => {
      if (dataMap[ref.point]) {
        createRow(ref, dataMap[ref.point]);
      }
    });

    // Add the next empty reference point row
    const nextRef = getNextReference();
    if (nextRef) createRow(nextRef);
  }

  function submitMeasurements() {
    const result = [];

    const rows = tbody.querySelectorAll("tr");
    rows.forEach(row => {
      const point = row.children[0].textContent;
      const standard = row.querySelector(".standard-input").value;
      const x = row.children[2].querySelector("input").value.trim();
      const y = row.children[3].querySelector("input").value.trim();

      if (x !== "" || y !== "") {
        result.push({ point, standard, x, y });
      }
    });

    document.getElementById("output").textContent = JSON.stringify(result, null, 2);
  }

  // Initialize table on page load
  loadMeasurements();
</script>
