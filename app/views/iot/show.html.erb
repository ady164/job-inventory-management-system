
<div class="iot-container">
  <% if flash[:notice] %>
    <div id="flash-message" class="flash flash-notice"><%= flash[:notice] %></div>
  <% elsif flash[:alert] %>
    <div id="flash-message" class="flash flash-alert"><%= flash[:alert] %></div>
  <% end %>
  
  <div class="dispense-header" id="dispense-header">
    <button class="back-button" onclick="window.history.back(); return false;">Back</button>
    <div class="dispense-header-title" id="dispense-header-title">Dispense Item</div>
    <button class="ops-button" type="button" id="ops-button" onclick="setOpsType()">Restock</button>
  </div>
  
  <div class="dispense-item">
    <h3><%= @inventory.id %>. <%= @inventory.name %> </h3>
    <%= image_tag "#{@inventory.image_path}", alt: 'Image', class: 'dispense-item-img' %>
    <div class="dispense-details">
      <p>PID: <%= @inventory.id %> </p>
      <p class="dispense-details-aval-qty"><%= @inventory.quantity < 1 ? "" : "Available: " %><span id='available-max-qty'><%= @inventory.quantity < 1 ? "Out of Stock!" : @inventory.quantity %>
</span></p>
    </div>
  </div>
  
  <div class="job-select" id="job-select-box">
    <label for="job_id">Job Reference:</label>
    <%= select_tag "inventory_log[job_id]",
      options_for_select(
        Job.where(status: "Confirmed").map { |job| [job.job_reference_number, job.id] }+ [["Others", "others"]],
        selected: nil
      ),
      prompt: "Select Job",
      class: "job-dropdown",
      id: "job_select"
    %>
  </div>
  
  <div id="quantity-container">
    <p>Quantity:</p>
    <button class="quantity-button quantity-button-sub" id="decrease-button">-</button>
    <div id="dispense-quantity">1</div>
    <button class="quantity-button quantity-button-add" id="increase-button">+</button>
  </div>
  
  <div class="dispense-button-container">
    <button id="dispense-button">Confirm</button>
  </div>
  
  <div class="footer">
    <div id="clock"></div>
    <div id="status"></div>
  </div>
  
  <div id="pinModal" class="iot-modal" style="display:none;">
    <div class="iot-modal-content">
      <%= form_with url: update_quantity_iot_path(@inventory), method: :post, local: true do |form| %>
        <div class="pin-text">Enter Staff Pin:</div>
        <%= form.password_field :user_pin, required: true, id: "staff_pin_input", class:"pin-display" %>
        <%= form.number_field :quantity, required: true, id:"quantity_input", class:"hidden" %>
        <%= form.text_field :operation_type, required: true, id:"operation_type_input", class:"hidden" %>
        <%= form.hidden_field :job_id, id: "job_id_hidden" %>
        <div class="numpad">
          <button type="button" onclick="addDigit('1')">1</button>
          <button type="button" onclick="addDigit('2')">2</button>
          <button type="button" onclick="addDigit('3')">3</button>
          <button type="button" onclick="addDigit('4')">4</button>
          <button type="button" onclick="addDigit('5')">5</button>
          <button type="button" onclick="addDigit('6')">6</button>
          <button type="button" onclick="addDigit('7')">7</button>
          <button type="button" onclick="addDigit('8')">8</button>
          <button type="button" onclick="addDigit('9')">9</button>
          <button type="button" onclick="closePinModal()">back</button>
          <button type="button" onclick="addDigit('0')">0</button>
          <button type="button" onclick="deleteDigit()">‚Üê</button>
        </div>
        <%= form.submit "Submit", class: "pin-submit-button" %>
      <% end %>
    </div>
  </div>
</div>

<script>

document.addEventListener('turbo:load', function() {

  // Clock update
  function updateClock() {
    const now = new Date();
    const date = now.toLocaleDateString();
    const time = now.toLocaleTimeString();
    document.getElementById('clock').textContent = `${date} ${time}`;
  }
  updateClock();
  setInterval(updateClock, 1000);  

  // Quantity buttons setup
  const increaseButton = document.getElementById("increase-button");
  const decreaseButton = document.getElementById("decrease-button");
  const displayQuantity = document.getElementById("dispense-quantity");
  const maxQuantity = parseInt(document.getElementById('available-max-qty').textContent, 10);
  let currentQuantity = 1;

  function updateQuantityDisplay() {
    displayQuantity.textContent = currentQuantity;
  }
  function increaseQuantity() {
    setOpHeader()
    const operationTypeInput = document.getElementById("operation_type_input").value;
    if (operationTypeInput == "Dispense") {
      if (currentQuantity < maxQuantity) {
        currentQuantity++;
        updateQuantityDisplay();
      }
    } else {
      currentQuantity++;
      updateQuantityDisplay();
    }
  }
  function decreaseQuantity() {
    if (currentQuantity > 1) {
      currentQuantity--;
      updateQuantityDisplay();
    }
  }
  increaseButton.addEventListener("click", increaseQuantity);
  decreaseButton.addEventListener("click", decreaseQuantity);
  updateQuantityDisplay();

  // Modal and pin input
  const pinInput = document.getElementById("staff_pin_input");
  const quantityInput = document.getElementById("quantity_input");
  const operationDisplayHeader = document.getElementById("dispense-header-title");
  const operationTypeInput = document.getElementById("operation_type_input");
  const jobSelect = document.getElementById("job_select");
  const hiddenJobField = document.getElementById("job_id_hidden");

  function setOpHeader(){
    if (operationDisplayHeader.textContent === "Dispense Item") {
      operationTypeInput.value = "Dispense";
    } else if (operationDisplayHeader.textContent === "Restock Item") {
      operationTypeInput.value = "Restock";
    }
  }
  // Sync hidden job id field on change
  jobSelect.addEventListener("change", function () {
    hiddenJobField.value = jobSelect.value;
  });

  // Clear PIN input helper
  function clearPin(){
    pinInput.value = "";
  }

  window.openPinModal = function() {
    // Validate job selection before opening modal

    if (operationDisplayHeader.textContent === "Dispense Item") {
      if (!jobSelect.value || jobSelect.value === "") {
        alert("Please select a Job Reference before confirming.");
        return; // stop here, do not open modal
      }
    } else if (operationDisplayHeader.textContent === "Restock Item") {
      jobSelect.value == "others"
      hiddenJobField.value = "";
    }
    // Set hidden job id field before submitting
    if (jobSelect.value == "others"){
        hiddenJobField.value = "";
    }
    else {
        hiddenJobField.value = jobSelect.value;
    }

    if (quantityInput) {
      quantityInput.value = currentQuantity;
    }

    if (operationDisplayHeader.textContent === "Dispense Item") {
      operationTypeInput.value = "Dispense";
    } else if (operationDisplayHeader.textContent === "Restock Item") {
      operationTypeInput.value = "Restock";
    }

    document.getElementById("pinModal").style.display = "flex";
  };

  window.closePinModal = function() {
    clearPin();
    document.getElementById("pinModal").style.display = "none";
  };

  window.addDigit = function(digit) {
    if (pinInput.value.length < 6) {
      pinInput.value += digit;
    }
  };

  window.deleteDigit = function() {
    pinInput.value = pinInput.value.slice(0, -1);
  };

  // Confirm button now uses JS event listener instead of inline onclick
  const dispenseButton = document.getElementById("dispense-button");
  dispenseButton.addEventListener("click", openPinModal);

  // Flash message fadeout
  function flashmsg(){
    const flash = document.getElementById("flash-message");
    if (flash) {
      setTimeout(() => {
        flash.classList.add("fade-out");
      }, 3000);
      setTimeout(() => {
        flash.remove();
      }, 4500);
    }
  }
  flashmsg();

  // Toggle page between Dispense and Restock
  const operationTypeButon = document.getElementById("ops-button");
  const operationHeader = document.getElementById("dispense-header");
  const jobselect = document.getElementById("job-select-box");
  window.setOpsType = function() {
    if (operationTypeButon.textContent === "Dispense") {
      operationTypeButon.textContent = "Restock";
      operationDisplayHeader.textContent = "Dispense Item";
      operationHeader.style.backgroundColor = "Blue";
      jobselect.style.display = "block";
    } else if (operationTypeButon.textContent === "Restock") {
      operationTypeButon.textContent = "Dispense";
      operationDisplayHeader.textContent = "Restock Item";
      operationHeader.style.backgroundColor = "Red";
      jobselect.style.display = "none";
    }
  };

});

</script>
